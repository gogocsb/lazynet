// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DS_STORE_PROTOCOL.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DS_STORE_PROTOCOL.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DS {

namespace {

const ::google::protobuf::Descriptor* MSG_DS_STORE_MAIN_REGISTER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DS_STORE_MAIN_REGISTER_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_DS_STORE_MAIN_REGISTER_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DS_STORE_MAIN_REGISTER_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_DS_MAIN_STORE_PREPARE_STORE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DS_MAIN_STORE_PREPARE_STORE_reflection_ = NULL;
const ::google::protobuf::Descriptor* RECVINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RECVINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_DS_MAIN_STORE_PREPARE_STORE_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DS_MAIN_STORE_PREPARE_STORE_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLIENTINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLIENTINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_DS_MAIN_STORE_START_STORE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DS_MAIN_STORE_START_STORE_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_DS_STORE_MAIN_FINISH_BLK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DS_STORE_MAIN_FINISH_BLK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_DS_STORE_MAIN_FINISH_BLK_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DS_STORE_MAIN_FINISH_BLK_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_DS_MAIN_STORE_FINISH_STORE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DS_MAIN_STORE_FINISH_STORE_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_DS_MAIN_STORE_RETRY_STORE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DS_MAIN_STORE_RETRY_STORE_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_DS_MAIN_STORE_RETRY_STORE_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DS_MAIN_STORE_RETRY_STORE_ACK_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DS_5fSTORE_5fPROTOCOL_2eproto() {
  protobuf_AddDesc_DS_5fSTORE_5fPROTOCOL_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DS_STORE_PROTOCOL.proto");
  GOOGLE_CHECK(file != NULL);
  MSG_DS_STORE_MAIN_REGISTER_descriptor_ = file->message_type(0);
  static const int MSG_DS_STORE_MAIN_REGISTER_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_STORE_MAIN_REGISTER, thread_id_),
  };
  MSG_DS_STORE_MAIN_REGISTER_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DS_STORE_MAIN_REGISTER_descriptor_,
      MSG_DS_STORE_MAIN_REGISTER::default_instance_,
      MSG_DS_STORE_MAIN_REGISTER_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_STORE_MAIN_REGISTER, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_STORE_MAIN_REGISTER, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DS_STORE_MAIN_REGISTER));
  MSG_DS_STORE_MAIN_REGISTER_ACK_descriptor_ = file->message_type(1);
  static const int MSG_DS_STORE_MAIN_REGISTER_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_STORE_MAIN_REGISTER_ACK, thread_id_),
  };
  MSG_DS_STORE_MAIN_REGISTER_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DS_STORE_MAIN_REGISTER_ACK_descriptor_,
      MSG_DS_STORE_MAIN_REGISTER_ACK::default_instance_,
      MSG_DS_STORE_MAIN_REGISTER_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_STORE_MAIN_REGISTER_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_STORE_MAIN_REGISTER_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DS_STORE_MAIN_REGISTER_ACK));
  MSG_DS_MAIN_STORE_PREPARE_STORE_descriptor_ = file->message_type(2);
  static const int MSG_DS_MAIN_STORE_PREPARE_STORE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_PREPARE_STORE, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_PREPARE_STORE, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_PREPARE_STORE, type_id_),
  };
  MSG_DS_MAIN_STORE_PREPARE_STORE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DS_MAIN_STORE_PREPARE_STORE_descriptor_,
      MSG_DS_MAIN_STORE_PREPARE_STORE::default_instance_,
      MSG_DS_MAIN_STORE_PREPARE_STORE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_PREPARE_STORE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_PREPARE_STORE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DS_MAIN_STORE_PREPARE_STORE));
  RECVINFO_descriptor_ = file->message_type(3);
  static const int RECVINFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RECVINFO, recv_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RECVINFO, port_),
  };
  RECVINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RECVINFO_descriptor_,
      RECVINFO::default_instance_,
      RECVINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RECVINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RECVINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RECVINFO));
  MSG_DS_MAIN_STORE_PREPARE_STORE_ACK_descriptor_ = file->message_type(4);
  static const int MSG_DS_MAIN_STORE_PREPARE_STORE_ACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_PREPARE_STORE_ACK, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_PREPARE_STORE_ACK, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_PREPARE_STORE_ACK, recv_info_),
  };
  MSG_DS_MAIN_STORE_PREPARE_STORE_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DS_MAIN_STORE_PREPARE_STORE_ACK_descriptor_,
      MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::default_instance_,
      MSG_DS_MAIN_STORE_PREPARE_STORE_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_PREPARE_STORE_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_PREPARE_STORE_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DS_MAIN_STORE_PREPARE_STORE_ACK));
  CLIENTINFO_descriptor_ = file->message_type(5);
  static const int CLIENTINFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLIENTINFO, client_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLIENTINFO, port_),
  };
  CLIENTINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLIENTINFO_descriptor_,
      CLIENTINFO::default_instance_,
      CLIENTINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLIENTINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLIENTINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLIENTINFO));
  MSG_DS_MAIN_STORE_START_STORE_descriptor_ = file->message_type(6);
  static const int MSG_DS_MAIN_STORE_START_STORE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_START_STORE, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_START_STORE, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_START_STORE, client_info_),
  };
  MSG_DS_MAIN_STORE_START_STORE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DS_MAIN_STORE_START_STORE_descriptor_,
      MSG_DS_MAIN_STORE_START_STORE::default_instance_,
      MSG_DS_MAIN_STORE_START_STORE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_START_STORE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_START_STORE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DS_MAIN_STORE_START_STORE));
  MSG_DS_STORE_MAIN_FINISH_BLK_descriptor_ = file->message_type(7);
  static const int MSG_DS_STORE_MAIN_FINISH_BLK_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_STORE_MAIN_FINISH_BLK, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_STORE_MAIN_FINISH_BLK, blkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_STORE_MAIN_FINISH_BLK, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_STORE_MAIN_FINISH_BLK, end_time_),
  };
  MSG_DS_STORE_MAIN_FINISH_BLK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DS_STORE_MAIN_FINISH_BLK_descriptor_,
      MSG_DS_STORE_MAIN_FINISH_BLK::default_instance_,
      MSG_DS_STORE_MAIN_FINISH_BLK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_STORE_MAIN_FINISH_BLK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_STORE_MAIN_FINISH_BLK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DS_STORE_MAIN_FINISH_BLK));
  MSG_DS_STORE_MAIN_FINISH_BLK_ACK_descriptor_ = file->message_type(8);
  static const int MSG_DS_STORE_MAIN_FINISH_BLK_ACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_STORE_MAIN_FINISH_BLK_ACK, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_STORE_MAIN_FINISH_BLK_ACK, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_STORE_MAIN_FINISH_BLK_ACK, result_),
  };
  MSG_DS_STORE_MAIN_FINISH_BLK_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DS_STORE_MAIN_FINISH_BLK_ACK_descriptor_,
      MSG_DS_STORE_MAIN_FINISH_BLK_ACK::default_instance_,
      MSG_DS_STORE_MAIN_FINISH_BLK_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_STORE_MAIN_FINISH_BLK_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_STORE_MAIN_FINISH_BLK_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DS_STORE_MAIN_FINISH_BLK_ACK));
  MSG_DS_MAIN_STORE_FINISH_STORE_descriptor_ = file->message_type(9);
  static const int MSG_DS_MAIN_STORE_FINISH_STORE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_FINISH_STORE, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_FINISH_STORE, session_id_),
  };
  MSG_DS_MAIN_STORE_FINISH_STORE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DS_MAIN_STORE_FINISH_STORE_descriptor_,
      MSG_DS_MAIN_STORE_FINISH_STORE::default_instance_,
      MSG_DS_MAIN_STORE_FINISH_STORE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_FINISH_STORE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_FINISH_STORE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DS_MAIN_STORE_FINISH_STORE));
  MSG_DS_MAIN_STORE_RETRY_STORE_descriptor_ = file->message_type(10);
  static const int MSG_DS_MAIN_STORE_RETRY_STORE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_RETRY_STORE, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_RETRY_STORE, session_id_),
  };
  MSG_DS_MAIN_STORE_RETRY_STORE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DS_MAIN_STORE_RETRY_STORE_descriptor_,
      MSG_DS_MAIN_STORE_RETRY_STORE::default_instance_,
      MSG_DS_MAIN_STORE_RETRY_STORE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_RETRY_STORE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_RETRY_STORE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DS_MAIN_STORE_RETRY_STORE));
  MSG_DS_MAIN_STORE_RETRY_STORE_ACK_descriptor_ = file->message_type(11);
  static const int MSG_DS_MAIN_STORE_RETRY_STORE_ACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_RETRY_STORE_ACK, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_RETRY_STORE_ACK, result_),
  };
  MSG_DS_MAIN_STORE_RETRY_STORE_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DS_MAIN_STORE_RETRY_STORE_ACK_descriptor_,
      MSG_DS_MAIN_STORE_RETRY_STORE_ACK::default_instance_,
      MSG_DS_MAIN_STORE_RETRY_STORE_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_RETRY_STORE_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_MAIN_STORE_RETRY_STORE_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DS_MAIN_STORE_RETRY_STORE_ACK));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DS_5fSTORE_5fPROTOCOL_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DS_STORE_MAIN_REGISTER_descriptor_, &MSG_DS_STORE_MAIN_REGISTER::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DS_STORE_MAIN_REGISTER_ACK_descriptor_, &MSG_DS_STORE_MAIN_REGISTER_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DS_MAIN_STORE_PREPARE_STORE_descriptor_, &MSG_DS_MAIN_STORE_PREPARE_STORE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RECVINFO_descriptor_, &RECVINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DS_MAIN_STORE_PREPARE_STORE_ACK_descriptor_, &MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLIENTINFO_descriptor_, &CLIENTINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DS_MAIN_STORE_START_STORE_descriptor_, &MSG_DS_MAIN_STORE_START_STORE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DS_STORE_MAIN_FINISH_BLK_descriptor_, &MSG_DS_STORE_MAIN_FINISH_BLK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DS_STORE_MAIN_FINISH_BLK_ACK_descriptor_, &MSG_DS_STORE_MAIN_FINISH_BLK_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DS_MAIN_STORE_FINISH_STORE_descriptor_, &MSG_DS_MAIN_STORE_FINISH_STORE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DS_MAIN_STORE_RETRY_STORE_descriptor_, &MSG_DS_MAIN_STORE_RETRY_STORE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DS_MAIN_STORE_RETRY_STORE_ACK_descriptor_, &MSG_DS_MAIN_STORE_RETRY_STORE_ACK::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DS_5fSTORE_5fPROTOCOL_2eproto() {
  delete MSG_DS_STORE_MAIN_REGISTER::default_instance_;
  delete MSG_DS_STORE_MAIN_REGISTER_reflection_;
  delete MSG_DS_STORE_MAIN_REGISTER_ACK::default_instance_;
  delete MSG_DS_STORE_MAIN_REGISTER_ACK_reflection_;
  delete MSG_DS_MAIN_STORE_PREPARE_STORE::default_instance_;
  delete MSG_DS_MAIN_STORE_PREPARE_STORE_reflection_;
  delete RECVINFO::default_instance_;
  delete RECVINFO_reflection_;
  delete MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::default_instance_;
  delete MSG_DS_MAIN_STORE_PREPARE_STORE_ACK_reflection_;
  delete CLIENTINFO::default_instance_;
  delete CLIENTINFO_reflection_;
  delete MSG_DS_MAIN_STORE_START_STORE::default_instance_;
  delete MSG_DS_MAIN_STORE_START_STORE_reflection_;
  delete MSG_DS_STORE_MAIN_FINISH_BLK::default_instance_;
  delete MSG_DS_STORE_MAIN_FINISH_BLK_reflection_;
  delete MSG_DS_STORE_MAIN_FINISH_BLK_ACK::default_instance_;
  delete MSG_DS_STORE_MAIN_FINISH_BLK_ACK_reflection_;
  delete MSG_DS_MAIN_STORE_FINISH_STORE::default_instance_;
  delete MSG_DS_MAIN_STORE_FINISH_STORE_reflection_;
  delete MSG_DS_MAIN_STORE_RETRY_STORE::default_instance_;
  delete MSG_DS_MAIN_STORE_RETRY_STORE_reflection_;
  delete MSG_DS_MAIN_STORE_RETRY_STORE_ACK::default_instance_;
  delete MSG_DS_MAIN_STORE_RETRY_STORE_ACK_reflection_;
}

void protobuf_AddDesc_DS_5fSTORE_5fPROTOCOL_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027DS_STORE_PROTOCOL.proto\022\002DS\"/\n\032MSG_DS_"
    "STORE_MAIN_REGISTER\022\021\n\tthread_id\030\001 \001(\r\"3"
    "\n\036MSG_DS_STORE_MAIN_REGISTER_ACK\022\021\n\tthre"
    "ad_id\030\001 \001(\r\"W\n\037MSG_DS_MAIN_STORE_PREPARE"
    "_STORE\022\017\n\007task_id\030\001 \002(\005\022\022\n\nsession_id\030\002 "
    "\002(\005\022\017\n\007type_id\030\003 \002(\005\")\n\010RECVINFO\022\017\n\007recv"
    "_ip\030\001 \002(\t\022\014\n\004port\030\002 \002(\005\"g\n#MSG_DS_MAIN_S"
    "TORE_PREPARE_STORE_ACK\022\017\n\007task_id\030\001 \002(\005\022"
    "\016\n\006result\030\002 \002(\005\022\037\n\trecv_info\030\003 \002(\0132\014.DS."
    "RECVINFO\"-\n\nCLIENTINFO\022\021\n\tclient_ip\030\001 \002("
    "\t\022\014\n\004port\030\002 \002(\005\"i\n\035MSG_DS_MAIN_STORE_STA"
    "RT_STORE\022\017\n\007task_id\030\001 \002(\005\022\022\n\nsession_id\030"
    "\002 \002(\005\022#\n\013client_info\030\003 \001(\0132\016.DS.CLIENTIN"
    "FO\"d\n\034MSG_DS_STORE_MAIN_FINISH_BLK\022\017\n\007ta"
    "sk_id\030\001 \002(\005\022\r\n\005blkid\030\002 \002(\003\022\022\n\nstart_time"
    "\030\003 \002(\t\022\020\n\010end_time\030\004 \002(\t\"W\n MSG_DS_STORE"
    "_MAIN_FINISH_BLK_ACK\022\017\n\007task_id\030\001 \002(\005\022\022\n"
    "\nsession_id\030\002 \002(\005\022\016\n\006result\030\003 \002(\005\"E\n\036MSG"
    "_DS_MAIN_STORE_FINISH_STORE\022\017\n\007task_id\030\001"
    " \002(\005\022\022\n\nsession_id\030\002 \002(\005\"D\n\035MSG_DS_MAIN_"
    "STORE_RETRY_STORE\022\017\n\007task_id\030\001 \002(\005\022\022\n\nse"
    "ssion_id\030\002 \002(\005\"D\n!MSG_DS_MAIN_STORE_RETR"
    "Y_STORE_ACK\022\017\n\007task_id\030\001 \002(\005\022\016\n\006result\030\002"
    " \002(\005", 924);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DS_STORE_PROTOCOL.proto", &protobuf_RegisterTypes);
  MSG_DS_STORE_MAIN_REGISTER::default_instance_ = new MSG_DS_STORE_MAIN_REGISTER();
  MSG_DS_STORE_MAIN_REGISTER_ACK::default_instance_ = new MSG_DS_STORE_MAIN_REGISTER_ACK();
  MSG_DS_MAIN_STORE_PREPARE_STORE::default_instance_ = new MSG_DS_MAIN_STORE_PREPARE_STORE();
  RECVINFO::default_instance_ = new RECVINFO();
  MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::default_instance_ = new MSG_DS_MAIN_STORE_PREPARE_STORE_ACK();
  CLIENTINFO::default_instance_ = new CLIENTINFO();
  MSG_DS_MAIN_STORE_START_STORE::default_instance_ = new MSG_DS_MAIN_STORE_START_STORE();
  MSG_DS_STORE_MAIN_FINISH_BLK::default_instance_ = new MSG_DS_STORE_MAIN_FINISH_BLK();
  MSG_DS_STORE_MAIN_FINISH_BLK_ACK::default_instance_ = new MSG_DS_STORE_MAIN_FINISH_BLK_ACK();
  MSG_DS_MAIN_STORE_FINISH_STORE::default_instance_ = new MSG_DS_MAIN_STORE_FINISH_STORE();
  MSG_DS_MAIN_STORE_RETRY_STORE::default_instance_ = new MSG_DS_MAIN_STORE_RETRY_STORE();
  MSG_DS_MAIN_STORE_RETRY_STORE_ACK::default_instance_ = new MSG_DS_MAIN_STORE_RETRY_STORE_ACK();
  MSG_DS_STORE_MAIN_REGISTER::default_instance_->InitAsDefaultInstance();
  MSG_DS_STORE_MAIN_REGISTER_ACK::default_instance_->InitAsDefaultInstance();
  MSG_DS_MAIN_STORE_PREPARE_STORE::default_instance_->InitAsDefaultInstance();
  RECVINFO::default_instance_->InitAsDefaultInstance();
  MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::default_instance_->InitAsDefaultInstance();
  CLIENTINFO::default_instance_->InitAsDefaultInstance();
  MSG_DS_MAIN_STORE_START_STORE::default_instance_->InitAsDefaultInstance();
  MSG_DS_STORE_MAIN_FINISH_BLK::default_instance_->InitAsDefaultInstance();
  MSG_DS_STORE_MAIN_FINISH_BLK_ACK::default_instance_->InitAsDefaultInstance();
  MSG_DS_MAIN_STORE_FINISH_STORE::default_instance_->InitAsDefaultInstance();
  MSG_DS_MAIN_STORE_RETRY_STORE::default_instance_->InitAsDefaultInstance();
  MSG_DS_MAIN_STORE_RETRY_STORE_ACK::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DS_5fSTORE_5fPROTOCOL_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DS_5fSTORE_5fPROTOCOL_2eproto {
  StaticDescriptorInitializer_DS_5fSTORE_5fPROTOCOL_2eproto() {
    protobuf_AddDesc_DS_5fSTORE_5fPROTOCOL_2eproto();
  }
} static_descriptor_initializer_DS_5fSTORE_5fPROTOCOL_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MSG_DS_STORE_MAIN_REGISTER::kThreadIdFieldNumber;
#endif  // !_MSC_VER

MSG_DS_STORE_MAIN_REGISTER::MSG_DS_STORE_MAIN_REGISTER()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS.MSG_DS_STORE_MAIN_REGISTER)
}

void MSG_DS_STORE_MAIN_REGISTER::InitAsDefaultInstance() {
}

MSG_DS_STORE_MAIN_REGISTER::MSG_DS_STORE_MAIN_REGISTER(const MSG_DS_STORE_MAIN_REGISTER& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS.MSG_DS_STORE_MAIN_REGISTER)
}

void MSG_DS_STORE_MAIN_REGISTER::SharedCtor() {
  _cached_size_ = 0;
  thread_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DS_STORE_MAIN_REGISTER::~MSG_DS_STORE_MAIN_REGISTER() {
  // @@protoc_insertion_point(destructor:DS.MSG_DS_STORE_MAIN_REGISTER)
  SharedDtor();
}

void MSG_DS_STORE_MAIN_REGISTER::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSG_DS_STORE_MAIN_REGISTER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DS_STORE_MAIN_REGISTER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DS_STORE_MAIN_REGISTER_descriptor_;
}

const MSG_DS_STORE_MAIN_REGISTER& MSG_DS_STORE_MAIN_REGISTER::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DS_5fSTORE_5fPROTOCOL_2eproto();
  return *default_instance_;
}

MSG_DS_STORE_MAIN_REGISTER* MSG_DS_STORE_MAIN_REGISTER::default_instance_ = NULL;

MSG_DS_STORE_MAIN_REGISTER* MSG_DS_STORE_MAIN_REGISTER::New() const {
  return new MSG_DS_STORE_MAIN_REGISTER;
}

void MSG_DS_STORE_MAIN_REGISTER::Clear() {
  thread_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DS_STORE_MAIN_REGISTER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DS.MSG_DS_STORE_MAIN_REGISTER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 thread_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS.MSG_DS_STORE_MAIN_REGISTER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS.MSG_DS_STORE_MAIN_REGISTER)
  return false;
#undef DO_
}

void MSG_DS_STORE_MAIN_REGISTER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS.MSG_DS_STORE_MAIN_REGISTER)
  // optional uint32 thread_id = 1;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->thread_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DS.MSG_DS_STORE_MAIN_REGISTER)
}

::google::protobuf::uint8* MSG_DS_STORE_MAIN_REGISTER::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DS.MSG_DS_STORE_MAIN_REGISTER)
  // optional uint32 thread_id = 1;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->thread_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DS.MSG_DS_STORE_MAIN_REGISTER)
  return target;
}

int MSG_DS_STORE_MAIN_REGISTER::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 thread_id = 1;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thread_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DS_STORE_MAIN_REGISTER::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DS_STORE_MAIN_REGISTER* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DS_STORE_MAIN_REGISTER*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DS_STORE_MAIN_REGISTER::MergeFrom(const MSG_DS_STORE_MAIN_REGISTER& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DS_STORE_MAIN_REGISTER::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DS_STORE_MAIN_REGISTER::CopyFrom(const MSG_DS_STORE_MAIN_REGISTER& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DS_STORE_MAIN_REGISTER::IsInitialized() const {

  return true;
}

void MSG_DS_STORE_MAIN_REGISTER::Swap(MSG_DS_STORE_MAIN_REGISTER* other) {
  if (other != this) {
    std::swap(thread_id_, other->thread_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DS_STORE_MAIN_REGISTER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DS_STORE_MAIN_REGISTER_descriptor_;
  metadata.reflection = MSG_DS_STORE_MAIN_REGISTER_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_DS_STORE_MAIN_REGISTER_ACK::kThreadIdFieldNumber;
#endif  // !_MSC_VER

MSG_DS_STORE_MAIN_REGISTER_ACK::MSG_DS_STORE_MAIN_REGISTER_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS.MSG_DS_STORE_MAIN_REGISTER_ACK)
}

void MSG_DS_STORE_MAIN_REGISTER_ACK::InitAsDefaultInstance() {
}

MSG_DS_STORE_MAIN_REGISTER_ACK::MSG_DS_STORE_MAIN_REGISTER_ACK(const MSG_DS_STORE_MAIN_REGISTER_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS.MSG_DS_STORE_MAIN_REGISTER_ACK)
}

void MSG_DS_STORE_MAIN_REGISTER_ACK::SharedCtor() {
  _cached_size_ = 0;
  thread_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DS_STORE_MAIN_REGISTER_ACK::~MSG_DS_STORE_MAIN_REGISTER_ACK() {
  // @@protoc_insertion_point(destructor:DS.MSG_DS_STORE_MAIN_REGISTER_ACK)
  SharedDtor();
}

void MSG_DS_STORE_MAIN_REGISTER_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSG_DS_STORE_MAIN_REGISTER_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DS_STORE_MAIN_REGISTER_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DS_STORE_MAIN_REGISTER_ACK_descriptor_;
}

const MSG_DS_STORE_MAIN_REGISTER_ACK& MSG_DS_STORE_MAIN_REGISTER_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DS_5fSTORE_5fPROTOCOL_2eproto();
  return *default_instance_;
}

MSG_DS_STORE_MAIN_REGISTER_ACK* MSG_DS_STORE_MAIN_REGISTER_ACK::default_instance_ = NULL;

MSG_DS_STORE_MAIN_REGISTER_ACK* MSG_DS_STORE_MAIN_REGISTER_ACK::New() const {
  return new MSG_DS_STORE_MAIN_REGISTER_ACK;
}

void MSG_DS_STORE_MAIN_REGISTER_ACK::Clear() {
  thread_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DS_STORE_MAIN_REGISTER_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DS.MSG_DS_STORE_MAIN_REGISTER_ACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 thread_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS.MSG_DS_STORE_MAIN_REGISTER_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS.MSG_DS_STORE_MAIN_REGISTER_ACK)
  return false;
#undef DO_
}

void MSG_DS_STORE_MAIN_REGISTER_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS.MSG_DS_STORE_MAIN_REGISTER_ACK)
  // optional uint32 thread_id = 1;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->thread_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DS.MSG_DS_STORE_MAIN_REGISTER_ACK)
}

::google::protobuf::uint8* MSG_DS_STORE_MAIN_REGISTER_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DS.MSG_DS_STORE_MAIN_REGISTER_ACK)
  // optional uint32 thread_id = 1;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->thread_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DS.MSG_DS_STORE_MAIN_REGISTER_ACK)
  return target;
}

int MSG_DS_STORE_MAIN_REGISTER_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 thread_id = 1;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thread_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DS_STORE_MAIN_REGISTER_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DS_STORE_MAIN_REGISTER_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DS_STORE_MAIN_REGISTER_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DS_STORE_MAIN_REGISTER_ACK::MergeFrom(const MSG_DS_STORE_MAIN_REGISTER_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DS_STORE_MAIN_REGISTER_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DS_STORE_MAIN_REGISTER_ACK::CopyFrom(const MSG_DS_STORE_MAIN_REGISTER_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DS_STORE_MAIN_REGISTER_ACK::IsInitialized() const {

  return true;
}

void MSG_DS_STORE_MAIN_REGISTER_ACK::Swap(MSG_DS_STORE_MAIN_REGISTER_ACK* other) {
  if (other != this) {
    std::swap(thread_id_, other->thread_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DS_STORE_MAIN_REGISTER_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DS_STORE_MAIN_REGISTER_ACK_descriptor_;
  metadata.reflection = MSG_DS_STORE_MAIN_REGISTER_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_DS_MAIN_STORE_PREPARE_STORE::kTaskIdFieldNumber;
const int MSG_DS_MAIN_STORE_PREPARE_STORE::kSessionIdFieldNumber;
const int MSG_DS_MAIN_STORE_PREPARE_STORE::kTypeIdFieldNumber;
#endif  // !_MSC_VER

MSG_DS_MAIN_STORE_PREPARE_STORE::MSG_DS_MAIN_STORE_PREPARE_STORE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS.MSG_DS_MAIN_STORE_PREPARE_STORE)
}

void MSG_DS_MAIN_STORE_PREPARE_STORE::InitAsDefaultInstance() {
}

MSG_DS_MAIN_STORE_PREPARE_STORE::MSG_DS_MAIN_STORE_PREPARE_STORE(const MSG_DS_MAIN_STORE_PREPARE_STORE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS.MSG_DS_MAIN_STORE_PREPARE_STORE)
}

void MSG_DS_MAIN_STORE_PREPARE_STORE::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  session_id_ = 0;
  type_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DS_MAIN_STORE_PREPARE_STORE::~MSG_DS_MAIN_STORE_PREPARE_STORE() {
  // @@protoc_insertion_point(destructor:DS.MSG_DS_MAIN_STORE_PREPARE_STORE)
  SharedDtor();
}

void MSG_DS_MAIN_STORE_PREPARE_STORE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSG_DS_MAIN_STORE_PREPARE_STORE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DS_MAIN_STORE_PREPARE_STORE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DS_MAIN_STORE_PREPARE_STORE_descriptor_;
}

const MSG_DS_MAIN_STORE_PREPARE_STORE& MSG_DS_MAIN_STORE_PREPARE_STORE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DS_5fSTORE_5fPROTOCOL_2eproto();
  return *default_instance_;
}

MSG_DS_MAIN_STORE_PREPARE_STORE* MSG_DS_MAIN_STORE_PREPARE_STORE::default_instance_ = NULL;

MSG_DS_MAIN_STORE_PREPARE_STORE* MSG_DS_MAIN_STORE_PREPARE_STORE::New() const {
  return new MSG_DS_MAIN_STORE_PREPARE_STORE;
}

void MSG_DS_MAIN_STORE_PREPARE_STORE::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MSG_DS_MAIN_STORE_PREPARE_STORE*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(task_id_, type_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DS_MAIN_STORE_PREPARE_STORE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DS.MSG_DS_MAIN_STORE_PREPARE_STORE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 task_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // required int32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type_id;
        break;
      }

      // required int32 type_id = 3;
      case 3: {
        if (tag == 24) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS.MSG_DS_MAIN_STORE_PREPARE_STORE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS.MSG_DS_MAIN_STORE_PREPARE_STORE)
  return false;
#undef DO_
}

void MSG_DS_MAIN_STORE_PREPARE_STORE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS.MSG_DS_MAIN_STORE_PREPARE_STORE)
  // required int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }

  // required int32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->session_id(), output);
  }

  // required int32 type_id = 3;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DS.MSG_DS_MAIN_STORE_PREPARE_STORE)
}

::google::protobuf::uint8* MSG_DS_MAIN_STORE_PREPARE_STORE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DS.MSG_DS_MAIN_STORE_PREPARE_STORE)
  // required int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }

  // required int32 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->session_id(), target);
  }

  // required int32 type_id = 3;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DS.MSG_DS_MAIN_STORE_PREPARE_STORE)
  return target;
}

int MSG_DS_MAIN_STORE_PREPARE_STORE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

    // required int32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // required int32 type_id = 3;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DS_MAIN_STORE_PREPARE_STORE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DS_MAIN_STORE_PREPARE_STORE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DS_MAIN_STORE_PREPARE_STORE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DS_MAIN_STORE_PREPARE_STORE::MergeFrom(const MSG_DS_MAIN_STORE_PREPARE_STORE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DS_MAIN_STORE_PREPARE_STORE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DS_MAIN_STORE_PREPARE_STORE::CopyFrom(const MSG_DS_MAIN_STORE_PREPARE_STORE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DS_MAIN_STORE_PREPARE_STORE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MSG_DS_MAIN_STORE_PREPARE_STORE::Swap(MSG_DS_MAIN_STORE_PREPARE_STORE* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(type_id_, other->type_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DS_MAIN_STORE_PREPARE_STORE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DS_MAIN_STORE_PREPARE_STORE_descriptor_;
  metadata.reflection = MSG_DS_MAIN_STORE_PREPARE_STORE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RECVINFO::kRecvIpFieldNumber;
const int RECVINFO::kPortFieldNumber;
#endif  // !_MSC_VER

RECVINFO::RECVINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS.RECVINFO)
}

void RECVINFO::InitAsDefaultInstance() {
}

RECVINFO::RECVINFO(const RECVINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS.RECVINFO)
}

void RECVINFO::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  recv_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RECVINFO::~RECVINFO() {
  // @@protoc_insertion_point(destructor:DS.RECVINFO)
  SharedDtor();
}

void RECVINFO::SharedDtor() {
  if (recv_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recv_ip_;
  }
  if (this != default_instance_) {
  }
}

void RECVINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RECVINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RECVINFO_descriptor_;
}

const RECVINFO& RECVINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DS_5fSTORE_5fPROTOCOL_2eproto();
  return *default_instance_;
}

RECVINFO* RECVINFO::default_instance_ = NULL;

RECVINFO* RECVINFO::New() const {
  return new RECVINFO;
}

void RECVINFO::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_recv_ip()) {
      if (recv_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        recv_ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RECVINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DS.RECVINFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string recv_ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recv_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recv_ip().data(), this->recv_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recv_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS.RECVINFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS.RECVINFO)
  return false;
#undef DO_
}

void RECVINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS.RECVINFO)
  // required string recv_ip = 1;
  if (has_recv_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recv_ip().data(), this->recv_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recv_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->recv_ip(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DS.RECVINFO)
}

::google::protobuf::uint8* RECVINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DS.RECVINFO)
  // required string recv_ip = 1;
  if (has_recv_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recv_ip().data(), this->recv_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recv_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->recv_ip(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DS.RECVINFO)
  return target;
}

int RECVINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string recv_ip = 1;
    if (has_recv_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recv_ip());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RECVINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RECVINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RECVINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RECVINFO::MergeFrom(const RECVINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recv_ip()) {
      set_recv_ip(from.recv_ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RECVINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RECVINFO::CopyFrom(const RECVINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RECVINFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RECVINFO::Swap(RECVINFO* other) {
  if (other != this) {
    std::swap(recv_ip_, other->recv_ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RECVINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RECVINFO_descriptor_;
  metadata.reflection = RECVINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::kTaskIdFieldNumber;
const int MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::kResultFieldNumber;
const int MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::kRecvInfoFieldNumber;
#endif  // !_MSC_VER

MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::MSG_DS_MAIN_STORE_PREPARE_STORE_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS.MSG_DS_MAIN_STORE_PREPARE_STORE_ACK)
}

void MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::InitAsDefaultInstance() {
  recv_info_ = const_cast< ::DS::RECVINFO*>(&::DS::RECVINFO::default_instance());
}

MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::MSG_DS_MAIN_STORE_PREPARE_STORE_ACK(const MSG_DS_MAIN_STORE_PREPARE_STORE_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS.MSG_DS_MAIN_STORE_PREPARE_STORE_ACK)
}

void MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  result_ = 0;
  recv_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::~MSG_DS_MAIN_STORE_PREPARE_STORE_ACK() {
  // @@protoc_insertion_point(destructor:DS.MSG_DS_MAIN_STORE_PREPARE_STORE_ACK)
  SharedDtor();
}

void MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::SharedDtor() {
  if (this != default_instance_) {
    delete recv_info_;
  }
}

void MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DS_MAIN_STORE_PREPARE_STORE_ACK_descriptor_;
}

const MSG_DS_MAIN_STORE_PREPARE_STORE_ACK& MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DS_5fSTORE_5fPROTOCOL_2eproto();
  return *default_instance_;
}

MSG_DS_MAIN_STORE_PREPARE_STORE_ACK* MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::default_instance_ = NULL;

MSG_DS_MAIN_STORE_PREPARE_STORE_ACK* MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::New() const {
  return new MSG_DS_MAIN_STORE_PREPARE_STORE_ACK;
}

void MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MSG_DS_MAIN_STORE_PREPARE_STORE_ACK*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(task_id_, result_);
    if (has_recv_info()) {
      if (recv_info_ != NULL) recv_info_->::DS::RECVINFO::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DS.MSG_DS_MAIN_STORE_PREPARE_STORE_ACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 task_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_recv_info;
        break;
      }

      // required .DS.RECVINFO recv_info = 3;
      case 3: {
        if (tag == 26) {
         parse_recv_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recv_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS.MSG_DS_MAIN_STORE_PREPARE_STORE_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS.MSG_DS_MAIN_STORE_PREPARE_STORE_ACK)
  return false;
#undef DO_
}

void MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS.MSG_DS_MAIN_STORE_PREPARE_STORE_ACK)
  // required int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // required .DS.RECVINFO recv_info = 3;
  if (has_recv_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->recv_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DS.MSG_DS_MAIN_STORE_PREPARE_STORE_ACK)
}

::google::protobuf::uint8* MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DS.MSG_DS_MAIN_STORE_PREPARE_STORE_ACK)
  // required int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // required .DS.RECVINFO recv_info = 3;
  if (has_recv_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->recv_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DS.MSG_DS_MAIN_STORE_PREPARE_STORE_ACK)
  return target;
}

int MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required .DS.RECVINFO recv_info = 3;
    if (has_recv_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recv_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DS_MAIN_STORE_PREPARE_STORE_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DS_MAIN_STORE_PREPARE_STORE_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::MergeFrom(const MSG_DS_MAIN_STORE_PREPARE_STORE_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_recv_info()) {
      mutable_recv_info()->::DS::RECVINFO::MergeFrom(from.recv_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::CopyFrom(const MSG_DS_MAIN_STORE_PREPARE_STORE_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_recv_info()) {
    if (!this->recv_info().IsInitialized()) return false;
  }
  return true;
}

void MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::Swap(MSG_DS_MAIN_STORE_PREPARE_STORE_ACK* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(result_, other->result_);
    std::swap(recv_info_, other->recv_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DS_MAIN_STORE_PREPARE_STORE_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DS_MAIN_STORE_PREPARE_STORE_ACK_descriptor_;
  metadata.reflection = MSG_DS_MAIN_STORE_PREPARE_STORE_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLIENTINFO::kClientIpFieldNumber;
const int CLIENTINFO::kPortFieldNumber;
#endif  // !_MSC_VER

CLIENTINFO::CLIENTINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS.CLIENTINFO)
}

void CLIENTINFO::InitAsDefaultInstance() {
}

CLIENTINFO::CLIENTINFO(const CLIENTINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS.CLIENTINFO)
}

void CLIENTINFO::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLIENTINFO::~CLIENTINFO() {
  // @@protoc_insertion_point(destructor:DS.CLIENTINFO)
  SharedDtor();
}

void CLIENTINFO::SharedDtor() {
  if (client_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_ip_;
  }
  if (this != default_instance_) {
  }
}

void CLIENTINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLIENTINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLIENTINFO_descriptor_;
}

const CLIENTINFO& CLIENTINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DS_5fSTORE_5fPROTOCOL_2eproto();
  return *default_instance_;
}

CLIENTINFO* CLIENTINFO::default_instance_ = NULL;

CLIENTINFO* CLIENTINFO::New() const {
  return new CLIENTINFO;
}

void CLIENTINFO::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_client_ip()) {
      if (client_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLIENTINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DS.CLIENTINFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string client_ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS.CLIENTINFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS.CLIENTINFO)
  return false;
#undef DO_
}

void CLIENTINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS.CLIENTINFO)
  // required string client_ip = 1;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_ip(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DS.CLIENTINFO)
}

::google::protobuf::uint8* CLIENTINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DS.CLIENTINFO)
  // required string client_ip = 1;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_ip(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DS.CLIENTINFO)
  return target;
}

int CLIENTINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string client_ip = 1;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ip());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLIENTINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLIENTINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLIENTINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLIENTINFO::MergeFrom(const CLIENTINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_ip()) {
      set_client_ip(from.client_ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLIENTINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLIENTINFO::CopyFrom(const CLIENTINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLIENTINFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CLIENTINFO::Swap(CLIENTINFO* other) {
  if (other != this) {
    std::swap(client_ip_, other->client_ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLIENTINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLIENTINFO_descriptor_;
  metadata.reflection = CLIENTINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_DS_MAIN_STORE_START_STORE::kTaskIdFieldNumber;
const int MSG_DS_MAIN_STORE_START_STORE::kSessionIdFieldNumber;
const int MSG_DS_MAIN_STORE_START_STORE::kClientInfoFieldNumber;
#endif  // !_MSC_VER

MSG_DS_MAIN_STORE_START_STORE::MSG_DS_MAIN_STORE_START_STORE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS.MSG_DS_MAIN_STORE_START_STORE)
}

void MSG_DS_MAIN_STORE_START_STORE::InitAsDefaultInstance() {
  client_info_ = const_cast< ::DS::CLIENTINFO*>(&::DS::CLIENTINFO::default_instance());
}

MSG_DS_MAIN_STORE_START_STORE::MSG_DS_MAIN_STORE_START_STORE(const MSG_DS_MAIN_STORE_START_STORE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS.MSG_DS_MAIN_STORE_START_STORE)
}

void MSG_DS_MAIN_STORE_START_STORE::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  session_id_ = 0;
  client_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DS_MAIN_STORE_START_STORE::~MSG_DS_MAIN_STORE_START_STORE() {
  // @@protoc_insertion_point(destructor:DS.MSG_DS_MAIN_STORE_START_STORE)
  SharedDtor();
}

void MSG_DS_MAIN_STORE_START_STORE::SharedDtor() {
  if (this != default_instance_) {
    delete client_info_;
  }
}

void MSG_DS_MAIN_STORE_START_STORE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DS_MAIN_STORE_START_STORE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DS_MAIN_STORE_START_STORE_descriptor_;
}

const MSG_DS_MAIN_STORE_START_STORE& MSG_DS_MAIN_STORE_START_STORE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DS_5fSTORE_5fPROTOCOL_2eproto();
  return *default_instance_;
}

MSG_DS_MAIN_STORE_START_STORE* MSG_DS_MAIN_STORE_START_STORE::default_instance_ = NULL;

MSG_DS_MAIN_STORE_START_STORE* MSG_DS_MAIN_STORE_START_STORE::New() const {
  return new MSG_DS_MAIN_STORE_START_STORE;
}

void MSG_DS_MAIN_STORE_START_STORE::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MSG_DS_MAIN_STORE_START_STORE*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(task_id_, session_id_);
    if (has_client_info()) {
      if (client_info_ != NULL) client_info_->::DS::CLIENTINFO::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DS_MAIN_STORE_START_STORE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DS.MSG_DS_MAIN_STORE_START_STORE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 task_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // required int32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_client_info;
        break;
      }

      // optional .DS.CLIENTINFO client_info = 3;
      case 3: {
        if (tag == 26) {
         parse_client_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS.MSG_DS_MAIN_STORE_START_STORE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS.MSG_DS_MAIN_STORE_START_STORE)
  return false;
#undef DO_
}

void MSG_DS_MAIN_STORE_START_STORE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS.MSG_DS_MAIN_STORE_START_STORE)
  // required int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }

  // required int32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->session_id(), output);
  }

  // optional .DS.CLIENTINFO client_info = 3;
  if (has_client_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->client_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DS.MSG_DS_MAIN_STORE_START_STORE)
}

::google::protobuf::uint8* MSG_DS_MAIN_STORE_START_STORE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DS.MSG_DS_MAIN_STORE_START_STORE)
  // required int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }

  // required int32 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->session_id(), target);
  }

  // optional .DS.CLIENTINFO client_info = 3;
  if (has_client_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->client_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DS.MSG_DS_MAIN_STORE_START_STORE)
  return target;
}

int MSG_DS_MAIN_STORE_START_STORE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

    // required int32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional .DS.CLIENTINFO client_info = 3;
    if (has_client_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DS_MAIN_STORE_START_STORE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DS_MAIN_STORE_START_STORE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DS_MAIN_STORE_START_STORE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DS_MAIN_STORE_START_STORE::MergeFrom(const MSG_DS_MAIN_STORE_START_STORE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_client_info()) {
      mutable_client_info()->::DS::CLIENTINFO::MergeFrom(from.client_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DS_MAIN_STORE_START_STORE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DS_MAIN_STORE_START_STORE::CopyFrom(const MSG_DS_MAIN_STORE_START_STORE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DS_MAIN_STORE_START_STORE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_client_info()) {
    if (!this->client_info().IsInitialized()) return false;
  }
  return true;
}

void MSG_DS_MAIN_STORE_START_STORE::Swap(MSG_DS_MAIN_STORE_START_STORE* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(client_info_, other->client_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DS_MAIN_STORE_START_STORE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DS_MAIN_STORE_START_STORE_descriptor_;
  metadata.reflection = MSG_DS_MAIN_STORE_START_STORE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_DS_STORE_MAIN_FINISH_BLK::kTaskIdFieldNumber;
const int MSG_DS_STORE_MAIN_FINISH_BLK::kBlkidFieldNumber;
const int MSG_DS_STORE_MAIN_FINISH_BLK::kStartTimeFieldNumber;
const int MSG_DS_STORE_MAIN_FINISH_BLK::kEndTimeFieldNumber;
#endif  // !_MSC_VER

MSG_DS_STORE_MAIN_FINISH_BLK::MSG_DS_STORE_MAIN_FINISH_BLK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS.MSG_DS_STORE_MAIN_FINISH_BLK)
}

void MSG_DS_STORE_MAIN_FINISH_BLK::InitAsDefaultInstance() {
}

MSG_DS_STORE_MAIN_FINISH_BLK::MSG_DS_STORE_MAIN_FINISH_BLK(const MSG_DS_STORE_MAIN_FINISH_BLK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS.MSG_DS_STORE_MAIN_FINISH_BLK)
}

void MSG_DS_STORE_MAIN_FINISH_BLK::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  task_id_ = 0;
  blkid_ = GOOGLE_LONGLONG(0);
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DS_STORE_MAIN_FINISH_BLK::~MSG_DS_STORE_MAIN_FINISH_BLK() {
  // @@protoc_insertion_point(destructor:DS.MSG_DS_STORE_MAIN_FINISH_BLK)
  SharedDtor();
}

void MSG_DS_STORE_MAIN_FINISH_BLK::SharedDtor() {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (this != default_instance_) {
  }
}

void MSG_DS_STORE_MAIN_FINISH_BLK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DS_STORE_MAIN_FINISH_BLK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DS_STORE_MAIN_FINISH_BLK_descriptor_;
}

const MSG_DS_STORE_MAIN_FINISH_BLK& MSG_DS_STORE_MAIN_FINISH_BLK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DS_5fSTORE_5fPROTOCOL_2eproto();
  return *default_instance_;
}

MSG_DS_STORE_MAIN_FINISH_BLK* MSG_DS_STORE_MAIN_FINISH_BLK::default_instance_ = NULL;

MSG_DS_STORE_MAIN_FINISH_BLK* MSG_DS_STORE_MAIN_FINISH_BLK::New() const {
  return new MSG_DS_STORE_MAIN_FINISH_BLK;
}

void MSG_DS_STORE_MAIN_FINISH_BLK::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    task_id_ = 0;
    blkid_ = GOOGLE_LONGLONG(0);
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_time_->clear();
      }
    }
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DS_STORE_MAIN_FINISH_BLK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DS.MSG_DS_STORE_MAIN_FINISH_BLK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 task_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_blkid;
        break;
      }

      // required int64 blkid = 2;
      case 2: {
        if (tag == 16) {
         parse_blkid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blkid_)));
          set_has_blkid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_start_time;
        break;
      }

      // required string start_time = 3;
      case 3: {
        if (tag == 26) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_time().data(), this->start_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "start_time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_end_time;
        break;
      }

      // required string end_time = 4;
      case 4: {
        if (tag == 34) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->end_time().data(), this->end_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "end_time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS.MSG_DS_STORE_MAIN_FINISH_BLK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS.MSG_DS_STORE_MAIN_FINISH_BLK)
  return false;
#undef DO_
}

void MSG_DS_STORE_MAIN_FINISH_BLK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS.MSG_DS_STORE_MAIN_FINISH_BLK)
  // required int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }

  // required int64 blkid = 2;
  if (has_blkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->blkid(), output);
  }

  // required string start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "start_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->start_time(), output);
  }

  // required string end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "end_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DS.MSG_DS_STORE_MAIN_FINISH_BLK)
}

::google::protobuf::uint8* MSG_DS_STORE_MAIN_FINISH_BLK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DS.MSG_DS_STORE_MAIN_FINISH_BLK)
  // required int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }

  // required int64 blkid = 2;
  if (has_blkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->blkid(), target);
  }

  // required string start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "start_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->start_time(), target);
  }

  // required string end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "end_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DS.MSG_DS_STORE_MAIN_FINISH_BLK)
  return target;
}

int MSG_DS_STORE_MAIN_FINISH_BLK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

    // required int64 blkid = 2;
    if (has_blkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->blkid());
    }

    // required string start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_time());
    }

    // required string end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DS_STORE_MAIN_FINISH_BLK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DS_STORE_MAIN_FINISH_BLK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DS_STORE_MAIN_FINISH_BLK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DS_STORE_MAIN_FINISH_BLK::MergeFrom(const MSG_DS_STORE_MAIN_FINISH_BLK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_blkid()) {
      set_blkid(from.blkid());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DS_STORE_MAIN_FINISH_BLK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DS_STORE_MAIN_FINISH_BLK::CopyFrom(const MSG_DS_STORE_MAIN_FINISH_BLK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DS_STORE_MAIN_FINISH_BLK::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MSG_DS_STORE_MAIN_FINISH_BLK::Swap(MSG_DS_STORE_MAIN_FINISH_BLK* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(blkid_, other->blkid_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DS_STORE_MAIN_FINISH_BLK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DS_STORE_MAIN_FINISH_BLK_descriptor_;
  metadata.reflection = MSG_DS_STORE_MAIN_FINISH_BLK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_DS_STORE_MAIN_FINISH_BLK_ACK::kTaskIdFieldNumber;
const int MSG_DS_STORE_MAIN_FINISH_BLK_ACK::kSessionIdFieldNumber;
const int MSG_DS_STORE_MAIN_FINISH_BLK_ACK::kResultFieldNumber;
#endif  // !_MSC_VER

MSG_DS_STORE_MAIN_FINISH_BLK_ACK::MSG_DS_STORE_MAIN_FINISH_BLK_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS.MSG_DS_STORE_MAIN_FINISH_BLK_ACK)
}

void MSG_DS_STORE_MAIN_FINISH_BLK_ACK::InitAsDefaultInstance() {
}

MSG_DS_STORE_MAIN_FINISH_BLK_ACK::MSG_DS_STORE_MAIN_FINISH_BLK_ACK(const MSG_DS_STORE_MAIN_FINISH_BLK_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS.MSG_DS_STORE_MAIN_FINISH_BLK_ACK)
}

void MSG_DS_STORE_MAIN_FINISH_BLK_ACK::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  session_id_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DS_STORE_MAIN_FINISH_BLK_ACK::~MSG_DS_STORE_MAIN_FINISH_BLK_ACK() {
  // @@protoc_insertion_point(destructor:DS.MSG_DS_STORE_MAIN_FINISH_BLK_ACK)
  SharedDtor();
}

void MSG_DS_STORE_MAIN_FINISH_BLK_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSG_DS_STORE_MAIN_FINISH_BLK_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DS_STORE_MAIN_FINISH_BLK_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DS_STORE_MAIN_FINISH_BLK_ACK_descriptor_;
}

const MSG_DS_STORE_MAIN_FINISH_BLK_ACK& MSG_DS_STORE_MAIN_FINISH_BLK_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DS_5fSTORE_5fPROTOCOL_2eproto();
  return *default_instance_;
}

MSG_DS_STORE_MAIN_FINISH_BLK_ACK* MSG_DS_STORE_MAIN_FINISH_BLK_ACK::default_instance_ = NULL;

MSG_DS_STORE_MAIN_FINISH_BLK_ACK* MSG_DS_STORE_MAIN_FINISH_BLK_ACK::New() const {
  return new MSG_DS_STORE_MAIN_FINISH_BLK_ACK;
}

void MSG_DS_STORE_MAIN_FINISH_BLK_ACK::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MSG_DS_STORE_MAIN_FINISH_BLK_ACK*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(task_id_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DS_STORE_MAIN_FINISH_BLK_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DS.MSG_DS_STORE_MAIN_FINISH_BLK_ACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 task_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // required int32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS.MSG_DS_STORE_MAIN_FINISH_BLK_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS.MSG_DS_STORE_MAIN_FINISH_BLK_ACK)
  return false;
#undef DO_
}

void MSG_DS_STORE_MAIN_FINISH_BLK_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS.MSG_DS_STORE_MAIN_FINISH_BLK_ACK)
  // required int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }

  // required int32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->session_id(), output);
  }

  // required int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DS.MSG_DS_STORE_MAIN_FINISH_BLK_ACK)
}

::google::protobuf::uint8* MSG_DS_STORE_MAIN_FINISH_BLK_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DS.MSG_DS_STORE_MAIN_FINISH_BLK_ACK)
  // required int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }

  // required int32 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->session_id(), target);
  }

  // required int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DS.MSG_DS_STORE_MAIN_FINISH_BLK_ACK)
  return target;
}

int MSG_DS_STORE_MAIN_FINISH_BLK_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

    // required int32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // required int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DS_STORE_MAIN_FINISH_BLK_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DS_STORE_MAIN_FINISH_BLK_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DS_STORE_MAIN_FINISH_BLK_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DS_STORE_MAIN_FINISH_BLK_ACK::MergeFrom(const MSG_DS_STORE_MAIN_FINISH_BLK_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DS_STORE_MAIN_FINISH_BLK_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DS_STORE_MAIN_FINISH_BLK_ACK::CopyFrom(const MSG_DS_STORE_MAIN_FINISH_BLK_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DS_STORE_MAIN_FINISH_BLK_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MSG_DS_STORE_MAIN_FINISH_BLK_ACK::Swap(MSG_DS_STORE_MAIN_FINISH_BLK_ACK* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DS_STORE_MAIN_FINISH_BLK_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DS_STORE_MAIN_FINISH_BLK_ACK_descriptor_;
  metadata.reflection = MSG_DS_STORE_MAIN_FINISH_BLK_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_DS_MAIN_STORE_FINISH_STORE::kTaskIdFieldNumber;
const int MSG_DS_MAIN_STORE_FINISH_STORE::kSessionIdFieldNumber;
#endif  // !_MSC_VER

MSG_DS_MAIN_STORE_FINISH_STORE::MSG_DS_MAIN_STORE_FINISH_STORE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS.MSG_DS_MAIN_STORE_FINISH_STORE)
}

void MSG_DS_MAIN_STORE_FINISH_STORE::InitAsDefaultInstance() {
}

MSG_DS_MAIN_STORE_FINISH_STORE::MSG_DS_MAIN_STORE_FINISH_STORE(const MSG_DS_MAIN_STORE_FINISH_STORE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS.MSG_DS_MAIN_STORE_FINISH_STORE)
}

void MSG_DS_MAIN_STORE_FINISH_STORE::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  session_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DS_MAIN_STORE_FINISH_STORE::~MSG_DS_MAIN_STORE_FINISH_STORE() {
  // @@protoc_insertion_point(destructor:DS.MSG_DS_MAIN_STORE_FINISH_STORE)
  SharedDtor();
}

void MSG_DS_MAIN_STORE_FINISH_STORE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSG_DS_MAIN_STORE_FINISH_STORE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DS_MAIN_STORE_FINISH_STORE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DS_MAIN_STORE_FINISH_STORE_descriptor_;
}

const MSG_DS_MAIN_STORE_FINISH_STORE& MSG_DS_MAIN_STORE_FINISH_STORE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DS_5fSTORE_5fPROTOCOL_2eproto();
  return *default_instance_;
}

MSG_DS_MAIN_STORE_FINISH_STORE* MSG_DS_MAIN_STORE_FINISH_STORE::default_instance_ = NULL;

MSG_DS_MAIN_STORE_FINISH_STORE* MSG_DS_MAIN_STORE_FINISH_STORE::New() const {
  return new MSG_DS_MAIN_STORE_FINISH_STORE;
}

void MSG_DS_MAIN_STORE_FINISH_STORE::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MSG_DS_MAIN_STORE_FINISH_STORE*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(task_id_, session_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DS_MAIN_STORE_FINISH_STORE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DS.MSG_DS_MAIN_STORE_FINISH_STORE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 task_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // required int32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS.MSG_DS_MAIN_STORE_FINISH_STORE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS.MSG_DS_MAIN_STORE_FINISH_STORE)
  return false;
#undef DO_
}

void MSG_DS_MAIN_STORE_FINISH_STORE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS.MSG_DS_MAIN_STORE_FINISH_STORE)
  // required int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }

  // required int32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DS.MSG_DS_MAIN_STORE_FINISH_STORE)
}

::google::protobuf::uint8* MSG_DS_MAIN_STORE_FINISH_STORE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DS.MSG_DS_MAIN_STORE_FINISH_STORE)
  // required int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }

  // required int32 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DS.MSG_DS_MAIN_STORE_FINISH_STORE)
  return target;
}

int MSG_DS_MAIN_STORE_FINISH_STORE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

    // required int32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DS_MAIN_STORE_FINISH_STORE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DS_MAIN_STORE_FINISH_STORE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DS_MAIN_STORE_FINISH_STORE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DS_MAIN_STORE_FINISH_STORE::MergeFrom(const MSG_DS_MAIN_STORE_FINISH_STORE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DS_MAIN_STORE_FINISH_STORE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DS_MAIN_STORE_FINISH_STORE::CopyFrom(const MSG_DS_MAIN_STORE_FINISH_STORE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DS_MAIN_STORE_FINISH_STORE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MSG_DS_MAIN_STORE_FINISH_STORE::Swap(MSG_DS_MAIN_STORE_FINISH_STORE* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DS_MAIN_STORE_FINISH_STORE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DS_MAIN_STORE_FINISH_STORE_descriptor_;
  metadata.reflection = MSG_DS_MAIN_STORE_FINISH_STORE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_DS_MAIN_STORE_RETRY_STORE::kTaskIdFieldNumber;
const int MSG_DS_MAIN_STORE_RETRY_STORE::kSessionIdFieldNumber;
#endif  // !_MSC_VER

MSG_DS_MAIN_STORE_RETRY_STORE::MSG_DS_MAIN_STORE_RETRY_STORE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS.MSG_DS_MAIN_STORE_RETRY_STORE)
}

void MSG_DS_MAIN_STORE_RETRY_STORE::InitAsDefaultInstance() {
}

MSG_DS_MAIN_STORE_RETRY_STORE::MSG_DS_MAIN_STORE_RETRY_STORE(const MSG_DS_MAIN_STORE_RETRY_STORE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS.MSG_DS_MAIN_STORE_RETRY_STORE)
}

void MSG_DS_MAIN_STORE_RETRY_STORE::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  session_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DS_MAIN_STORE_RETRY_STORE::~MSG_DS_MAIN_STORE_RETRY_STORE() {
  // @@protoc_insertion_point(destructor:DS.MSG_DS_MAIN_STORE_RETRY_STORE)
  SharedDtor();
}

void MSG_DS_MAIN_STORE_RETRY_STORE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSG_DS_MAIN_STORE_RETRY_STORE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DS_MAIN_STORE_RETRY_STORE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DS_MAIN_STORE_RETRY_STORE_descriptor_;
}

const MSG_DS_MAIN_STORE_RETRY_STORE& MSG_DS_MAIN_STORE_RETRY_STORE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DS_5fSTORE_5fPROTOCOL_2eproto();
  return *default_instance_;
}

MSG_DS_MAIN_STORE_RETRY_STORE* MSG_DS_MAIN_STORE_RETRY_STORE::default_instance_ = NULL;

MSG_DS_MAIN_STORE_RETRY_STORE* MSG_DS_MAIN_STORE_RETRY_STORE::New() const {
  return new MSG_DS_MAIN_STORE_RETRY_STORE;
}

void MSG_DS_MAIN_STORE_RETRY_STORE::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MSG_DS_MAIN_STORE_RETRY_STORE*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(task_id_, session_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DS_MAIN_STORE_RETRY_STORE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DS.MSG_DS_MAIN_STORE_RETRY_STORE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 task_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // required int32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS.MSG_DS_MAIN_STORE_RETRY_STORE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS.MSG_DS_MAIN_STORE_RETRY_STORE)
  return false;
#undef DO_
}

void MSG_DS_MAIN_STORE_RETRY_STORE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS.MSG_DS_MAIN_STORE_RETRY_STORE)
  // required int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }

  // required int32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DS.MSG_DS_MAIN_STORE_RETRY_STORE)
}

::google::protobuf::uint8* MSG_DS_MAIN_STORE_RETRY_STORE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DS.MSG_DS_MAIN_STORE_RETRY_STORE)
  // required int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }

  // required int32 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DS.MSG_DS_MAIN_STORE_RETRY_STORE)
  return target;
}

int MSG_DS_MAIN_STORE_RETRY_STORE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

    // required int32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DS_MAIN_STORE_RETRY_STORE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DS_MAIN_STORE_RETRY_STORE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DS_MAIN_STORE_RETRY_STORE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DS_MAIN_STORE_RETRY_STORE::MergeFrom(const MSG_DS_MAIN_STORE_RETRY_STORE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DS_MAIN_STORE_RETRY_STORE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DS_MAIN_STORE_RETRY_STORE::CopyFrom(const MSG_DS_MAIN_STORE_RETRY_STORE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DS_MAIN_STORE_RETRY_STORE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MSG_DS_MAIN_STORE_RETRY_STORE::Swap(MSG_DS_MAIN_STORE_RETRY_STORE* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DS_MAIN_STORE_RETRY_STORE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DS_MAIN_STORE_RETRY_STORE_descriptor_;
  metadata.reflection = MSG_DS_MAIN_STORE_RETRY_STORE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_DS_MAIN_STORE_RETRY_STORE_ACK::kTaskIdFieldNumber;
const int MSG_DS_MAIN_STORE_RETRY_STORE_ACK::kResultFieldNumber;
#endif  // !_MSC_VER

MSG_DS_MAIN_STORE_RETRY_STORE_ACK::MSG_DS_MAIN_STORE_RETRY_STORE_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DS.MSG_DS_MAIN_STORE_RETRY_STORE_ACK)
}

void MSG_DS_MAIN_STORE_RETRY_STORE_ACK::InitAsDefaultInstance() {
}

MSG_DS_MAIN_STORE_RETRY_STORE_ACK::MSG_DS_MAIN_STORE_RETRY_STORE_ACK(const MSG_DS_MAIN_STORE_RETRY_STORE_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DS.MSG_DS_MAIN_STORE_RETRY_STORE_ACK)
}

void MSG_DS_MAIN_STORE_RETRY_STORE_ACK::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DS_MAIN_STORE_RETRY_STORE_ACK::~MSG_DS_MAIN_STORE_RETRY_STORE_ACK() {
  // @@protoc_insertion_point(destructor:DS.MSG_DS_MAIN_STORE_RETRY_STORE_ACK)
  SharedDtor();
}

void MSG_DS_MAIN_STORE_RETRY_STORE_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSG_DS_MAIN_STORE_RETRY_STORE_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DS_MAIN_STORE_RETRY_STORE_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DS_MAIN_STORE_RETRY_STORE_ACK_descriptor_;
}

const MSG_DS_MAIN_STORE_RETRY_STORE_ACK& MSG_DS_MAIN_STORE_RETRY_STORE_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DS_5fSTORE_5fPROTOCOL_2eproto();
  return *default_instance_;
}

MSG_DS_MAIN_STORE_RETRY_STORE_ACK* MSG_DS_MAIN_STORE_RETRY_STORE_ACK::default_instance_ = NULL;

MSG_DS_MAIN_STORE_RETRY_STORE_ACK* MSG_DS_MAIN_STORE_RETRY_STORE_ACK::New() const {
  return new MSG_DS_MAIN_STORE_RETRY_STORE_ACK;
}

void MSG_DS_MAIN_STORE_RETRY_STORE_ACK::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MSG_DS_MAIN_STORE_RETRY_STORE_ACK*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(task_id_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DS_MAIN_STORE_RETRY_STORE_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DS.MSG_DS_MAIN_STORE_RETRY_STORE_ACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 task_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DS.MSG_DS_MAIN_STORE_RETRY_STORE_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DS.MSG_DS_MAIN_STORE_RETRY_STORE_ACK)
  return false;
#undef DO_
}

void MSG_DS_MAIN_STORE_RETRY_STORE_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DS.MSG_DS_MAIN_STORE_RETRY_STORE_ACK)
  // required int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DS.MSG_DS_MAIN_STORE_RETRY_STORE_ACK)
}

::google::protobuf::uint8* MSG_DS_MAIN_STORE_RETRY_STORE_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DS.MSG_DS_MAIN_STORE_RETRY_STORE_ACK)
  // required int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DS.MSG_DS_MAIN_STORE_RETRY_STORE_ACK)
  return target;
}

int MSG_DS_MAIN_STORE_RETRY_STORE_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DS_MAIN_STORE_RETRY_STORE_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DS_MAIN_STORE_RETRY_STORE_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DS_MAIN_STORE_RETRY_STORE_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DS_MAIN_STORE_RETRY_STORE_ACK::MergeFrom(const MSG_DS_MAIN_STORE_RETRY_STORE_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DS_MAIN_STORE_RETRY_STORE_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DS_MAIN_STORE_RETRY_STORE_ACK::CopyFrom(const MSG_DS_MAIN_STORE_RETRY_STORE_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DS_MAIN_STORE_RETRY_STORE_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MSG_DS_MAIN_STORE_RETRY_STORE_ACK::Swap(MSG_DS_MAIN_STORE_RETRY_STORE_ACK* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DS_MAIN_STORE_RETRY_STORE_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DS_MAIN_STORE_RETRY_STORE_ACK_descriptor_;
  metadata.reflection = MSG_DS_MAIN_STORE_RETRY_STORE_ACK_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DS

// @@protoc_insertion_point(global_scope)
